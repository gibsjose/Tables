#!/usr/bin/env python3.4

from enum import Enum
import sys, os, traceback, optparse
import re
import operator
import time
import csv

class Algorithm(Enum):
    first_fit = 0
    best_fit = 1
    worst_fit = 2
    random = 3

class Direction(Enum):
    none = 0
    ascending = 1
    descending = 2

class SeatPacker:
    def __init__(self, guests = [], tables = [], algorithm = 'first-fit'):
        self.guests = guests.list
        self.tables = tables.list
        self.start_time = time.time()
        self.end_time = time.time()
        self.unseated_parties = 0
        self.unseated_guests = 0
        self.with_children = []
        self.without_children = []

        #Default: Process SMALLEST parties first
        self.guest_direction = Direction.ascending

        #Default: Seat in LARGEST tables first
        self.table_direction = Direction.descending

        #Ascending: Place SMALLEST parties in FIRST partition large enough
        if algorithm == 'first-fit':
            self.algorithm = Algorithm.first_fit
            self.guest_direction = Direction.ascending
            self.table_direction = Direction.descending

        #Descending: Place LARGEST parties in FIRST partition large enough
        elif algorithm == 'first-fit-descending':
            self.algorithm = Algorithm.first_fit
            self.guest_direction = Direction.descending
            self.table_direction = Direction.descending

        #Place LARGEST parties in SMALLEST partition large enough
        elif algorithm == 'best-fit':
            self.algorithm = Algorithm.best_fit
            self.guest_direction = Direction.descending
            self.table_direction = Direction.ascending

        #Place SMALLEST parties in LARGEST partition large enough
        elif algorithm == 'worst-fit':
            self.algorithm = Algorithm.worst_fit
            self.guest_direction = Direction.ascending
            self.table_direction = Direction.descending

        #Place parties randomly
        elif algorithm == 'random':
            self.algorithm = Algorithm.random

        #Unknown...
        else:
            raise Exception('Unknown algorithm: ' + algorithm)

        self.algorithm_str = algorithm

    #Split, Sort, Seat.
    def Run(self):
        self.start_time = time.time()

        #Split guest into those WITH children and those WITHOUT
        self.Split()

        print('\nSPLITING')
        print('--------')
        print('With Children:')
        for guest in self.with_children:
            guest.Print()

        print('\nWithout Children:')
        for guest in self.without_children:
            guest.Print()

        #Sort parties and tables based on algorithm
        self.Sort()

        print('\nSORTING')
        print('-------')
        print('Guests:')
        for guest in self.with_children:
            guest.Print()
        for guest in self.without_children:
            guest.Print()

        print('\nTables:')
        for table in self.tables:
            table.Print()

        #Seat parties
        self.Seat()

        self.end_time = time.time()

    #Split guests into those with and without children
    def Split(self):
        for guest in self.guests:
            if guest.children:
                self.with_children.append(guest)
            else:
                self.without_children.append(guest)

    #Sort both tables and parties
    def Sort(self):
        self.SortTables()
        self.SortParties()

    #Sort tables by direction (ASCENDING, DESCENDING, or none)
    def SortTables(self):
        #Smallest first
        if self.table_direction == Direction.ascending:
            self.tables.sort(key = lambda x: x.size)
        #Largest first
        elif self.table_direction == Direction.descending:
            self.tables.sort(key = lambda x: x.size, reverse = True)

    #Sort parties by direction (ASCENDING, DESCENDING, or none)
    def SortParties(self):
        #Smallest first
        if self.guest_direction == Direction.ascending:
            self.with_children.sort(key = lambda x: x.size)
            self.without_children.sort(key = lambda x: x.size)

        #Largest first
        elif self.guest_direction == Direction.descending:
            self.with_children.sort(key = lambda x: x.size, reverse = True)
            self.without_children.sort(key = lambda x: x.size, reverse = True)

    #Seat those with children and then those without
    def Seat(self):
        print('\nSEATING')
        print('-------')
        self.SeatList(self.with_children)
        self.SeatList(self.without_children)

    #Seat an individual list
    def SeatList(self, guests):
        #Try to seat guests
        for guest in guests:
            #Skip guests that have been seated already
            if guest.seated == True:
                continue

            for table in self.tables:
                #Guests fit at table with no problem
                if table.available >= guest.size:
                    guest.tables.append((table, guest.size))
                    guest.seated = True
                    table.available -= guest.size
                    self.SortTables()
                    print(guest.name + ', party of ' + str(guest.size) + ' was seated at ' + table.name + ', with ' + str(table.available) + ' seats left')
                    break

                #Guests do not fit, try the next table
                else:
                    continue

        #Count unseated parties
        for guest in guests:
            if guest.seated == False:
                self.unseated_parties += 1
                self.unseated_guests += guest.size

    def Print(self):
        print('\nALGORITHM')
        print('---------')
        print('Algorithm used: ' + self.algorithm_str)

        print('Guests were seated ', end='')
        if self.guest_direction == Direction.ascending:
            print('by smallest party first, ', end='')
        elif self.guest_direction == Direction.descending:
            print('by largest party first, ', end='')
        else:
            print('as listed, ', end='')

        if self.table_direction == Direction.ascending:
            print('at the smallest tables')
        elif self.table_direction == Direction.descending:
            print('at the largest tables')
        else:
            print('at the tables as listed')

        print('')

        print('Runtime: ' + str((self.end_time - self.start_time) * 1000) + ' ms')

        print('Unseated Parties: ' + str(self.unseated_parties))
        print('Unseated Guests: ' + str(self.unseated_guests))

class Guest:
    def __init__(self, name, size, children):
        self.name = name
        self.size = size
        self.children = children
        self.tables = []
        self.seated = False

    def Print(self):
        print('\t{:<20}{:>3}\t'.format(self.name, str(self.size)) + '\tChildren: ' + str(self.children))

class Table:
    def __init__(self, name, size):
        self.name = name
        self.size = size
        self.available = self.size

    def Print(self):
        print('\t{:<20}{:>3} seats'.format(self.name, str(self.size)))

class Guests:
    def __init__(self, guest_file):
        self.file = guest_file
        self.list = []
        self.count = 0
        self.people = 0

        temp_list = []

        with open(self.file, 'r') as f:
            reader = csv.reader(f)
            temp_list = [tuple(line) for line in reader]

            for item in temp_list:
                if item[2].lower().strip() == 'true':
                    guest = Guest(item[0], int(item[1]), True)
                else:
                    guest = Guest(item[0], int(item[1]), False)

                self.list.append(guest)

            self.count = len(self.list)

            for guest in self.list:
                self.people += int(guest.size)

    def Print(self):
        print('GUESTS')
        print('------')
        print('There are ' + str(self.count) + ' parties and ' + str(self.people) + ' total guests:')

        for guest in self.list:
            guest.Print()

class Tables:
    def __init__(self, table_count, table_file):
        self.table_count = table_count
        self.file = table_file
        self.list = []
        self.count = 0
        self.seats = 0

    def ParseTableCount(self):
        print('ParseTableCount')

    def ParseTableFile(self):
        temp_list = []

        with open(self.file, 'r') as f:
            for line in f:
                if line.startswith('$'):
                    continue
                elif line.isspace():
                    continue
                else:
                    line = line.translate({ord(i):None for i in ' ()\n'})
                    temp_list.append(tuple(line.split(',')))

            offset = 1

            for item in temp_list:
                for i in range(1, int(item[0]) + 1):
                    table = Table('Table ' + str(offset), int(item[1]))
                    self.list.append(table)
                    offset = offset + 1


            self.count = len(self.list)

            for table in self.list:
                self.seats += table.size

    def ParseTables(self):
        if self.table_count:
            self.ParseTableCount()
        else:
            self.ParseTableFile()

    def Print(self):
        print('\nTABLES')
        print('------')
        print('There are ' + str(self.count) + ' tables and ' + str(self.seats) + ' total seats:')

        for table in self.list:
            table.Print()

def main ():
    global options, args

    if options.verbose:
        print('OPTIONS')
        print('-------')
        if options.guest_file:
            print('\tGuest File: ' + options.guest_file)
        if options.tables:
            print('\tTables: ' + options.tables)
        if options.table_file:
            print('\tTable File: ' + options.table_file)
        if options.output_file:
            print('\tOutput File: ' + options.output_file)
        if options.algorithm:
            print('\tAlgorithm: ' + options.algorithm)
        if options.interactive:
            print('\tInteractive Mode')
        if options.diagram:
            print('\tDiagram Mode')
        if options.verbose:
            print('\tVerbose Mode')
        if options.quiet:
            print('\tQuiet Mode')

    if options.tables:
        tables = Tables(options.tables, None)
    elif options.table_file:
        tables = Tables(None, options.table_file)
    else:
        raise Exception('Must supply table information through either -t or -T')
        sys.exit(1)

    print('')

    #Create the guest list
    guests = Guests(options.guest_file)
    guests.Print()

    #Parse the table file/count
    tables.ParseTables()
    tables.Print()

    #Use the algorithm supplied or default to 'first-fit'
    if options.algorithm:
        algorithm = options.algorithm
    else:
        algorithm = 'first-fit'

    #Perform the bin packing
    packer = SeatPacker(guests, tables, algorithm)
    packer.Run()
    packer.Print()

    #Write the output file
    if options.output_file:
        output_file = options.output_file
    else:
        #@TODO Figure out a way to make this better in terms of UI... Asking for input is probably decent, but it screws up the algorithm timing...
        #Maybe it would be better to time the placement algorithm itself in addition to the total runtime of the script...
        #output_file = input('Output Filename: ')
        output_file = 'map.tables'

    #packer.Write(options.output_file)

if __name__ == '__main__':
    try:
        start_time = time.time()
        parser = optparse.OptionParser(formatter=optparse.TitledHelpFormatter(), usage=globals()['__doc__'], version='$Id$')

        parser.add_option('-g', '--guest', action='store', type='string', dest='guest_file', help='guest file')

        parser.add_option('-t', '--table', action='store', type='string', dest='tables', help='\'-t (t, p)\' assume `t` tables with `p` people each - cannot be used with `-T`')

        parser.add_option('-T', '--Table', action='store', type='string', dest='table_file', help='table file - cannot be used with `-t`')

        parser.add_option('-o', '--output', action='store', type='string', dest='output_file', help='output file')

        parser.add_option('-i', '--interactive', action='store_true', default=False, help='interactive mode')

        parser.add_option('-d', '--diagram', action='store_true', default=False, help='diagram mode')

        parser.add_option('-v', '--verbose', action='store_true', default=False, help='verbose mode')

        parser.add_option('-q', '--quiet', action='store_true', default=False, help='quiet mode')

        parser.add_option('-a', '--algorithm', action='store', type='string', dest='algorithm', help='algorithm selection: first-fit, best-fit, worst-fit, random')

        (options, args) = parser.parse_args()

        if not options.guest_file:
            parser.error('missing argument: -g GUEST_FILE')

        main()
        if options.verbose: print('\n' + time.asctime())
        if options.verbose: print('Total Runtime: ', end='')
        if options.verbose: print(str((time.time() - start_time) * 1000) + ' ms')
        sys.exit(0)
    except KeyboardInterrupt as e: # Ctrl-C
        raise e
    except SystemExit as e: # sys.exit()
        raise e
    except Exception as e:
        print('Error: Unexpected Exception')
        print(str(e))
        traceback.print_exc()
        os._exit(1)
