#!/usr/bin/env python3.4

from enum import Enum
import sys, os, traceback, optparse
import operator
import time
import csv

# with open('test.csv', 'rb') as f:
#     reader = csv.reader(f)
#     your_list = map(tuple, reader)
#
# print your_list

class Algorithm(Enum):
    first_fit = 0
    best_fit = 1
    worst_fit = 2
    random = 3

class SeatPacker:
    def __init__(self, algorithm):
        if algorithm == 'first-fit':
            self.algorithm = first_fit
        elif algorithm == 'best-fit':
            self.algorithm = best_fit
        elif algorithm == 'worst-fit':
            self.algorithm = worst_fit
        elif algorithm == 'random':
            self.algorithm = random
        else:
            print('Error: Unknown algorithm: ' + algorithm)
            sys.exit(1)

        self.algorithm_str = algorithm

    def Print(self):
        print('Algorithm: ' + self.algorithm_str)

class Guest:
    def __init__(self, name, size, children):
        self.name = name
        self.size = size
        self.children = children

    def Print(self):
        print(self.name + ': ' + str(self.size) + ', Children: ' + str(self.children))

class Table:
    def __init__(self, name, size):
        self.name = name
        self.size = size

    def Print(self):
        print(self.name + ' (' + str(self.size) + ')')

class Guests:
    def __init__(self, guest_file):
        self.guest_file = guest_file
        self.guests = {}

    def Print(self):
        print('There are ' + len(self.guests) + ' guests')

class Tables:
    def __init__(self, table_count, table_file):
        self.table_count = table_count
        self.table_file = table_file
        self.tables = {}

    def ParseTables(self):
        if self.table_count:
            ParseTableCount()
        else:
            ParseTableFile()

    def ParseTableCount(self):
        None

    def ParseTableFile(self):
        None

    def Print(self):
        print('There are ' + len(self.tables) + ' tables')

def main ():
    global options, args

    if options.verbose:
        print('Options:')
        if options.guest_file:
            print('Guest File: ' + options.guest_file)
        elif options.tables:
            print('Tables: ' + options.tables)
        elif options.table_file:
            print('Table File: ' + options.table_file)
        elif options.output_file:
            print('Output File: ' + options.output_file)
        elif options.interactive:
            print('Interactive Mode')
        elif options.diagram:
            print('Diagram Mode')
        elif options.verbose:
            print('Verbose Mode')
        elif options.quiet:
            print('Quiet Mode')
        elif options.algorithm:
            print('Algorithm: ' + options.algorithm)

    if options.tables:
        tables = Tables(options.tables, None)
    elif options.table_file:
        tables = Tables(None, options.table_file)
    else:
        print('Must supply table information through either -t or -T')
        sys.exit(1)

    if not options.algorithm:
        options.algorithm = ''

    #Create the guest list
    guests = Guests(options.guest_file)
    guests.Print()

    #Parse the table file/count
    tables.ParseTables()
    tables.Print()

    #Perform the bin packing
    packer = SeatPacker(guests, tables)
    packer.Print()

    #Write the output file

if __name__ == '__main__':
    try:
        start_time = time.time()
        parser = optparse.OptionParser(formatter=optparse.TitledHelpFormatter(), usage=globals()['__doc__'], version='$Id$')

        parser.add_option('-g', '--guest', action='store', type='string', dest='guest_file', help='guest file')

        parser.add_option('-t', '--table', action='store', type='string', dest='tables', help='\'-t (t, p)\' assume `t` tables with `p` people each - cannot be used with `-T`')

        parser.add_option('-T', '--Table', action='store', type='string', dest='table_file', help='table file - cannot be used with `-t`')

        parser.add_option('-o', '--output', action='store', type='string', dest='output_file', help='output file')

        parser.add_option('-i', '--interactive', action='store_true', default=False, help='interactive mode')

        parser.add_option('-d', '--diagram', action='store_true', default=False, help='diagram mode')

        parser.add_option('-v', '--verbose', action='store_true', default=False, help='verbose mode')

        parser.add_option('-q', '--quiet', action='store_true', default=False, help='quiet mode')

        parser.add_option('-a', '--algorithm', action='store', type='string', dest='algorithm', help='algorithm selection: first-fit, best-fit, worst-fit, random')

        (options, args) = parser.parse_args()

        if not options.guest_file:
            parser.error('missing argument: -g GUEST_FILE')

        main()
        if options.verbose: print('\n' + time.asctime())
        if options.verbose: print('Total Runtime:',)
        if options.verbose: print(str((time.time() - start_time) * 1000) + ' ms')
        sys.exit(0)
    except KeyboardInterrupt as e: # Ctrl-C
        raise e
    except SystemExit as e: # sys.exit()
        raise e
    except Exception as e:
        print('Error: Unexpected Exception')
        print(str(e))
        traceback.print_exc()
        os._exit(1)
